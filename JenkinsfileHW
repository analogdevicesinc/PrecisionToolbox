// Pipeline
lock(label: 'adgt_test_harness_boards') {
    @Library('sdgtt-lib@adgt-test-harness') _ // Not necessary when we turn on global libraries :)
    def hdlBranch = "NA"
    def linuxBranch = "NA"
    def bootPartitionBranch = "2021_r2"
    def firmwareVersion = 'v0.34'
    def bootfile_source = 'artifactory' // options: sftp, artifactory, http, local
    def harness = getGauntlet(hdlBranch, linuxBranch, bootPartitionBranch, firmwareVersion, bootfile_source)
  
    //Update repos
    harness.set_env('libiio_repo', 'http://gateway.englab:3000/mirrors/libiio.git')
    harness.set_env('libiio_branch', 'v0.25')
    harness.set_env('nebula_repo', 'http://gateway.englab:3000/mirrors/nebula.git')
    harness.set_env('nebula_branch','dev')
    harness.set_env('nebula_config_branch','release')
    // harness.set_env('telemetry_repo', 'http://gateway.englab:3000/mirrors/telemetry.git')
    // harness.set_env('telemetry_branch', 'master')
    harness.set_env('matlab_repo', 'https://github.com/analogdevicesinc/PrecisionToolbox.git') // Not necessary when using checkout scm
    harness.set_env('matlab_release','R2021b')
    harness.set_matlab_timeout('30m')
  
    //Update nebula config from netbox
    harness.set_update_nebula_config(true)
    harness.set_env('nebula_config_source','netbox')
    harness.set_env('netbox_ip','primary.englab')
    harness.set_env('netbox_port','8000')
    harness.set_env('netbox_base_url','netbox')
    harness.set_env('netbox_token','0123456789abcdef0123456789abcdef01234567')
    harness.set_env('netbox_devices_tag','active')
    
    //Update agent with required deps
    harness.set_required_agent(["sdg-nuc-01"])
    harness.set_env('update_container_lib', true)
    harness.set_env('update_lib_requirements', true)
    harness.update_agents()
  
    //Set other test parameters
    harness.set_nebula_debug(true)
    harness.set_enable_docker(true)
    harness.set_docker_host_mode(false)
    harness.set_send_telemetry(false)
    harness.set_log_jira(false)
    harness.set_enable_resource_queuing(true)
    harness.set_lock_agent(true) // Required for MATLAB toolbox tests
    harness.set_elastic_server('192.168.10.1')
    //harness.set_required_hardware(["zynq-zed-ad7380",                                  
    //                              "zynq-zed-ad7768",
    //                              "zynq-zed-ad7768-1",
    //                              "zynq-zed-ad4030",
    //                              "zynq-zed-ad4630-16",
    //                             "zynq-zed-ad4630-24"])
    harness.set_required_hardware(["zynq-zed-adv7511-ad7768-1-evb"])
    harness.set_docker_args(['Vivado', 'MATLAB'])
    harness.set_nebula_local_fs_source_root("artifactory.analog.com")
  
    // Set stages (Stages are run sequentially on agents.)
    // harness.add_stage(harness.stage_library("UpdateBOOTFiles"), 'stopWhenFail',
    //                  harness.stage_library("RecoverBoard"))
  
    // Test stage
    harness.set_matlab_commands(["addpath(genpath('test'))",
                    "pyenv('Version','/usr/bin/python3')",
                    "runHWTests(getenv('board'))"])
    harness.add_stage(harness.stage_library("MATLABTests"),'continueWhenFail')
  
    // Send results
    harness.add_stage(harness.stage_library('SendResults'),'continueWhenFail')
  
    // Go go
    harness.run_stages()
}